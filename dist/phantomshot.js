/// <reference path="../all.d.ts" />
var PhantomShot;
(function (PhantomShot) {
    var Device = (function () {
        function Device(config) {
            this.devicePixelRatio = (config.devicePixelRatio ? config.devicePixelRatio : 1);
            this.height = config.height;
            this.width = config.width;
        }
        Device.prototype.getViewportSize = function () {
            return {
                height: this.height * this.devicePixelRatio,
                width: this.width * this.devicePixelRatio
            };
        };
        return Device;
    })();
    PhantomShot.Device = Device;
})(PhantomShot || (PhantomShot = {}));

/// <reference path="../all.d.ts" />

/// <reference path="../all.d.ts" />

/// <reference path="../all.d.ts" />

/// <reference path="../all.d.ts" />

/// <reference path="../all.d.ts" />

/// <reference path="../all.d.ts" />
var PhantomShot;
(function (_PhantomShot) {
    var PhantomShot = (function () {
        function PhantomShot(configFilePath) {
            var _this = this;
            this.filesystem = require("fs");
            this.system = require("system");
            this.webpage = require("webpage");
            this.configurationPath = configFilePath;
            this.page = this.webpage.create();
            // Set up loading state
            this.page.onLoadStarted = function () {
                _this.isLoading = true;
            };
            this.page.onLoadFinished = function (status) {
                _this.isLoading = false;
            };
        }
        PhantomShot.prototype.run = function (finishedCallback) {
            // Save finishedCallback
            this.finishedCallback = finishedCallback;
            // First do some preparation stuff
            this.readConfigFile(this.configurationPath);
            // Login
            if (this.configuration.login) {
                this.loginAndTakeScreenshots();
            }
            else {
                this.takeScreenshots();
            }
        };
        PhantomShot.prototype.buildFullUrl = function (path) {
            return this.configuration.baseUrl + "/" + path;
        };
        PhantomShot.prototype.loginAndTakeScreenshots = function () {
            var _this = this;
            this.page.open(this.buildFullUrl(this.configuration.login.url), function (result) {
                if (result == "success") {
                    console.log("Opened login page");
                    PhantomShot.evaluateJavaScript(_this.page, _this.configuration.login.inject);
                    // Now wait until page load has finished (user JS should trigger referral)
                    var timeout = window.setTimeout(function () {
                        window.clearInterval(interval);
                        _this.takeScreenshots();
                    }, 10 * 1000);
                    var interval = window.setInterval(function () {
                        if (!_this.isLoading) {
                            window.clearTimeout(timeout);
                            window.clearInterval(interval);
                            _this.takeScreenshots();
                        }
                    });
                }
                else {
                    console.error("Login failed");
                    _this.finishedCallback(1);
                }
            });
        };
        PhantomShot.evaluateJavaScript = function (page, code) {
            var fs = require("fs");
            fs.write("tmpscript.js", code);
            page.injectJs("tmpscript.js");
            fs.remove("tmpscript.js");
        };
        PhantomShot.prototype.getDeviceById = function (id) {
            for (var i = 0; i < this.configuration.devices.length; i++) {
                if (this.configuration.devices[i].id == id) {
                    return new _PhantomShot.Device(this.configuration.devices[i]);
                }
            }
        };
        PhantomShot.prototype.getTargetFilename = function (config) {
            return this.configuration.outDir + "/" + config.id + ".png";
        };
        PhantomShot.prototype.takeScreenshot = function (config, callback) {
            var _this = this;
            var page = this.page;
            page.viewportSize = config.device.getViewportSize();
            page.open(config.url, function (result) {
                if (result == "success") {
                    // Get the target rectangle
                    var rectangle = config.getTargetRectangle(page);
                    page.clipRect = rectangle;
                    // Inject javascript code
                    if (config.inject) {
                        PhantomShot.evaluateJavaScript(page, config.inject);
                    }
                    window.setTimeout(function () {
                        // Render the page
                        page.render(_this.getTargetFilename(config));
                        // Finish shot
                        callback(true);
                    }, config.delay ? config.delay : 0);
                }
                else {
                    callback(false);
                }
            });
        };
        PhantomShot.prototype.takeScreenshots = function () {
            var _this = this;
            // Current shot counter since we're processing the queue asynchronously.
            var currentShot = 0;
            var processShot = function () {
                var config = _this.configuration.shots[currentShot];
                // Instantiate basic screenshot class
                var screenshot = new _PhantomShot.Screenshot();
                screenshot.id = config.id;
                screenshot.inject = config.inject;
                screenshot.url = _this.buildFullUrl(config.url);
                screenshot.device = _this.getDeviceById(config.device);
                screenshot.delay = config.delay;
                // Element or region mode
                if (config.element) {
                    screenshot.element = config.element;
                }
                else {
                    screenshot.region = new _PhantomShot.Rectangle(screenshot.device, config.region);
                }
                // Take the screenshot and loop to next one
                _this.takeScreenshot(screenshot, function (result) {
                    console.info((currentShot + 1) + ". " + (result ? "SUCCESS" : "ERROR") + ": " + screenshot.id + " (" + screenshot.url + ")");
                    if (currentShot == _this.configuration.shots.length - 1) {
                        _this.finishedCallback(0);
                    }
                    else {
                        currentShot++;
                        processShot();
                    }
                });
            };
            // Start processing
            processShot();
        };
        PhantomShot.prototype.readConfigFile = function (path) {
            // Read config
            console.info("Reading config from " + path);
            var data = this.filesystem.read(path);
            this.configuration = JSON.parse(data);
        };
        return PhantomShot;
    })();
    _PhantomShot.PhantomShot = PhantomShot;
})(PhantomShot || (PhantomShot = {}));

/// <reference path="../all.d.ts" />
var PhantomShot;
(function (PhantomShot) {
    var Rectangle = (function () {
        function Rectangle(device, config) {
            this.top = (config && config.top ? config.top : 0);
            this.left = (config && config.left ? config.left : 0);
            this.width = (config && config.width ? config.width : device.width);
            this.height = (config && config.height ? config.height : device.height);
        }
        return Rectangle;
    })();
    PhantomShot.Rectangle = Rectangle;
})(PhantomShot || (PhantomShot = {}));

/// <reference path="../all.d.ts" />
var PhantomShot;
(function (PhantomShot) {
    var Screenshot = (function () {
        function Screenshot() {
        }
        Screenshot.prototype.getTargetRectangle = function (page) {
            if (this.region) {
                return this.region;
            }
            else {
                // Inject target element selector via evaluateJavascript() since evaluate() is executed within
                // the page and cannot access variables in the current scope.
                PhantomShot.PhantomShot.evaluateJavaScript(page, "window.phantomShotTargetElement = " + JSON.stringify(this.element) + ";");
                return page.evaluate(function () {
                    var element = document.querySelector(window.phantomShotTargetElement);
                    var rectangle = element.getBoundingClientRect();
                    return {
                        top: rectangle.top,
                        left: rectangle.left,
                        width: rectangle.right - rectangle.left,
                        height: rectangle.bottom - rectangle.top
                    };
                });
            }
        };
        return Screenshot;
    })();
    PhantomShot.Screenshot = Screenshot;
})(PhantomShot || (PhantomShot = {}));

/// <reference path="all.d.ts" />
var system = require("system");
var phantomShot = new PhantomShot.PhantomShot(system.args[1]);
phantomShot.run(function (result) {
    phantom.exit(result);
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi92YXIvd3d3L3BoYW50b21zaG90L1BoYW50b21TaG90L0RldmljZS50cyIsIi92YXIvd3d3L3BoYW50b21zaG90L1BoYW50b21TaG90L0lDb25maWd1cmF0aW9uLnRzIiwiL3Zhci93d3cvcGhhbnRvbXNob3QvUGhhbnRvbVNob3QvSURldmljZS50cyIsIi92YXIvd3d3L3BoYW50b21zaG90L1BoYW50b21TaG90L0lMb2dpbi50cyIsIi92YXIvd3d3L3BoYW50b21zaG90L1BoYW50b21TaG90L0lSZWdpb24udHMiLCIvdmFyL3d3dy9waGFudG9tc2hvdC9QaGFudG9tU2hvdC9JU2NyZWVuc2hvdC50cyIsIi92YXIvd3d3L3BoYW50b21zaG90L1BoYW50b21TaG90L1BoYW50b21TaG90LnRzIiwiL3Zhci93d3cvcGhhbnRvbXNob3QvUGhhbnRvbVNob3QvUmVjdGFuZ2xlLnRzIiwiL3Zhci93d3cvcGhhbnRvbXNob3QvUGhhbnRvbVNob3QvU2NyZWVuc2hvdC50cyIsIi92YXIvd3d3L3BoYW50b21zaG90L3BoYW50b21zaG90LnRzIl0sIm5hbWVzIjpbIlBoYW50b21TaG90IiwiUGhhbnRvbVNob3QuRGV2aWNlIiwiUGhhbnRvbVNob3QuRGV2aWNlLmNvbnN0cnVjdG9yIiwiUGhhbnRvbVNob3QuRGV2aWNlLmdldFZpZXdwb3J0U2l6ZSIsIlBoYW50b21TaG90LlBoYW50b21TaG90IiwiUGhhbnRvbVNob3QuUGhhbnRvbVNob3QuY29uc3RydWN0b3IiLCJQaGFudG9tU2hvdC5QaGFudG9tU2hvdC5ydW4iLCJQaGFudG9tU2hvdC5QaGFudG9tU2hvdC5idWlsZEZ1bGxVcmwiLCJQaGFudG9tU2hvdC5QaGFudG9tU2hvdC5sb2dpbkFuZFRha2VTY3JlZW5zaG90cyIsIlBoYW50b21TaG90LlBoYW50b21TaG90LmV2YWx1YXRlSmF2YVNjcmlwdCIsIlBoYW50b21TaG90LlBoYW50b21TaG90LmdldERldmljZUJ5SWQiLCJQaGFudG9tU2hvdC5QaGFudG9tU2hvdC5nZXRUYXJnZXRGaWxlbmFtZSIsIlBoYW50b21TaG90LlBoYW50b21TaG90LnRha2VTY3JlZW5zaG90IiwiUGhhbnRvbVNob3QuUGhhbnRvbVNob3QudGFrZVNjcmVlbnNob3RzIiwiUGhhbnRvbVNob3QuUGhhbnRvbVNob3QucmVhZENvbmZpZ0ZpbGUiLCJQaGFudG9tU2hvdC5SZWN0YW5nbGUiLCJQaGFudG9tU2hvdC5SZWN0YW5nbGUuY29uc3RydWN0b3IiLCJQaGFudG9tU2hvdC5TY3JlZW5zaG90IiwiUGhhbnRvbVNob3QuU2NyZWVuc2hvdC5jb25zdHJ1Y3RvciIsIlBoYW50b21TaG90LlNjcmVlbnNob3QuZ2V0VGFyZ2V0UmVjdGFuZ2xlIl0sIm1hcHBpbmdzIjoiQUFBQSxvQ0FBb0M7QUFFcEMsSUFBTyxXQUFXLENBbUJqQjtBQW5CRCxXQUFPLFdBQVcsRUFBQyxDQUFDO0lBQ2hCQSxJQUFhQSxNQUFNQTtRQUtmQyxTQUxTQSxNQUFNQSxDQUtIQSxNQUFlQTtZQUN2QkMsSUFBSUEsQ0FBQ0EsZ0JBQWdCQSxHQUFHQSxDQUFDQSxNQUFNQSxDQUFDQSxnQkFBZ0JBLEdBQUdBLE1BQU1BLENBQUNBLGdCQUFnQkEsR0FBR0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7WUFDaEZBLElBQUlBLENBQUNBLE1BQU1BLEdBQUdBLE1BQU1BLENBQUNBLE1BQU1BLENBQUNBO1lBQzVCQSxJQUFJQSxDQUFDQSxLQUFLQSxHQUFHQSxNQUFNQSxDQUFDQSxLQUFLQSxDQUFDQTtRQUM5QkEsQ0FBQ0E7UUFFREQsZ0NBQWVBLEdBQWZBO1lBQ0lFLE1BQU1BLENBQUNBO2dCQUNIQSxNQUFNQSxFQUFFQSxJQUFJQSxDQUFDQSxNQUFNQSxHQUFHQSxJQUFJQSxDQUFDQSxnQkFBZ0JBO2dCQUMzQ0EsS0FBS0EsRUFBRUEsSUFBSUEsQ0FBQ0EsS0FBS0EsR0FBR0EsSUFBSUEsQ0FBQ0EsZ0JBQWdCQTthQUM1Q0EsQ0FBQ0E7UUFDTkEsQ0FBQ0E7UUFDTEYsYUFBQ0E7SUFBREEsQ0FqQkFELEFBaUJDQyxJQUFBRDtJQWpCWUEs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QztBQUM5RCxXQUFXLENBQUMsR0FBRyxDQUFDLFVBQUMsTUFBTTtJQUFPLE9BQU8sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7QUFBQyxDQUFDLENBQUMsQ0FBQyIsImZpbGUiOiJwaGFudG9tc2hvdC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuLi9hbGwuZC50c1wiIC8+XG5cbm1vZHVsZSBQaGFudG9tU2hvdCB7XG4gICAgZXhwb3J0IGNsYXNzIERldmljZSB7XG4gICAgICAgIGRldmljZVBpeGVsUmF0aW86IG51bWJlcjtcbiAgICAgICAgaGVpZ2h0OiBudW1iZXI7XG4gICAgICAgIHdpZHRoOiBudW1iZXI7XG5cbiAgICAgICAgY29uc3RydWN0b3IoY29uZmlnOiBJRGV2aWNlKSB7XG4gICAgICAgICAgICB0aGlzLmRldmljZVBpeGVsUmF0aW8gPSAoY29uZmlnLmRldmljZVBpeGVsUmF0aW8gPyBjb25maWcuZGV2aWNlUGl4ZWxSYXRpbyA6IDEpO1xuICAgICAgICAgICAgdGhpcy5oZWlnaHQgPSBjb25maWcuaGVpZ2h0O1xuICAgICAgICAgICAgdGhpcy53aWR0aCA9IGNvbmZpZy53aWR0aDtcbiAgICAgICAgfVxuXG4gICAgICAgIGdldFZpZXdwb3J0U2l6ZSgpOiBTaXplIHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgaGVpZ2h0OiB0aGlzLmhlaWdodCAqIHRoaXMuZGV2aWNlUGl4ZWxSYXRpbyxcbiAgICAgICAgICAgICAgICB3aWR0aDogdGhpcy53aWR0aCAqIHRoaXMuZGV2aWNlUGl4ZWxSYXRpb1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgIH1cbn1cbiIsIi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuLi9hbGwuZC50c1wiIC8+XG5cbm1vZHVsZSBQaGFudG9tU2hvdCB7XG4gICAgZXhwb3J0IGludGVyZmFjZSBJQ29uZmlndXJhdGlvbiB7XG4gICAgICAgIGJhc2VVcmw6IHN0cmluZztcbiAgICAgICAgZm9ybWF0OiBzdHJpbmc7XG4gICAgICAgIG91dERpcjogc3RyaW5nO1xuICAgICAgICBkZXZpY2VzOiBJRGV2aWNlW107XG4gICAgICAgIHNob3RzOiBJU2NyZWVuc2hvdFtdO1xuICAgICAgICBsb2dpbjogSUxvZ2luO1xuICAgIH1cbn1cbiIsIi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuLi9hbGwuZC50c1wiIC8+XG5cbm1vZHVsZSBQaGFudG9tU2hvdCB7XG4gICAgZXhwb3J0IGludGVyZmFjZSBJRGV2aWNlXG4gICAge1xuICAgICAgICBpZDogc3RyaW5nO1xuICAgICAgICB3aWR0aD86IG51bWJlcjtcbiAgICAgICAgaGVpZ2h0PzogbnVtYmVyO1xuICAgICAgICBkZXZpY2VQaXhlbFJhdGlvPzogbnVtYmVyO1xuICAgIH1cbn1cbiIsIi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuLi9hbGwuZC50c1wiIC8+XG5cbm1vZHVsZSBQaGFudG9tU2hvdCB7XG4gICAgZXhwb3J0IGludGVyZmFjZSBJTG9naW4ge1xuICAgICAgICB1cmw6IHN0cmluZztcbiAgICAgICAgaW5qZWN0OiBzdHJpbmc7XG4gICAgfVxufVxuIiwiLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uL2FsbC5kLnRzXCIgLz5cblxubW9kdWxlIFBoYW50b21TaG90IHtcbiAgICBleHBvcnQgaW50ZXJmYWNlIElSZWdpb24ge1xuICAgICAgICB0b3A/OiBudW1iZXI7XG4gICAgICAgIGxlZnQ/OiBudW1iZXI7XG4gICAgICAgIHdpZHRoPzogbnVtYmVyO1xuICAgICAgICBoZWlnaHQ/OiBudW1iZXI7XG4gICAgfVxufVxuIiwiLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uL2FsbC5kLnRzXCIgLz5cblxubW9kdWxlIFBoYW50b21TaG90IHtcbiAgICBleHBvcnQgaW50ZXJmYWNlIElTY3JlZW5zaG90IHtcbiAgICAgICAgaWQ6IHN0cmluZztcbiAgICAgICAgdXJsOiBzdHJpbmc7XG4gICAgICAgIGRlbGF5PzogbnVtYmVyO1xuICAgICAgICBkZXZpY2U6IHN0cmluZztcbiAgICAgICAgcmVnaW9uPzogSVJlZ2lvbjtcbiAgICAgICAgZWxlbWVudD86IHN0cmluZztcbiAgICAgICAgaW5qZWN0Pzogc3RyaW5nO1xuICAgIH1cbn1cbiIsIi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuLi9hbGwuZC50c1wiIC8+XG5cbm1vZHVsZSBQaGFudG9tU2hvdCB7XG4gICAgZXhwb3J0IGNsYXNzIFBoYW50b21TaG90IHtcblxuICAgICAgICBwcml2YXRlIGZpbGVzeXN0ZW06IEZpbGVTeXN0ZW0gPSByZXF1aXJlKFwiZnNcIik7XG4gICAgICAgIHByaXZhdGUgc3lzdGVtOiBTeXN0ZW0gPSByZXF1aXJlKFwic3lzdGVtXCIpO1xuICAgICAgICBwcml2YXRlIHdlYnBhZ2UgPSByZXF1aXJlKFwid2VicGFnZVwiKTtcblxuICAgICAgICBwcml2YXRlIGNvbmZpZ3VyYXRpb25QYXRoOiBzdHJpbmc7XG4gICAgICAgIHByaXZhdGUgY29uZmlndXJhdGlvbjogSUNvbmZpZ3VyYXRpb247XG4gICAgICAgIHByaXZhdGUgcGFnZTogV2ViUGFnZTtcblxuICAgICAgICBwcml2YXRlIGlzTG9hZGluZzogYm9vbGVhbjtcbiAgICAgICAgcHJpdmF0ZSBmaW5pc2hlZENhbGxiYWNrOiAocmVzdWx0OiBudW1iZXIpID0+IHZvaWQ7XG5cbiAgICAgICAgY29uc3RydWN0b3IoY29uZmlnRmlsZVBhdGg6IHN0cmluZykge1xuICAgICAgICAgICAgdGhpcy5jb25maWd1cmF0aW9uUGF0aCA9IGNvbmZpZ0ZpbGVQYXRoO1xuICAgICAgICAgICAgdGhpcy5wYWdlID0gdGhpcy53ZWJwYWdlLmNyZWF0ZSgpO1xuXG4gICAgICAgICAgICAvLyBTZXQgdXAgbG9hZGluZyBzdGF0ZVxuICAgICAgICAgICAgdGhpcy5wYWdlLm9uTG9hZFN0YXJ0ZWQgPSAoKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5pc0xvYWRpbmcgPSB0cnVlO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHRoaXMucGFnZS5vbkxvYWRGaW5pc2hlZCA9IChzdGF0dXM6IHN0cmluZykgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuaXNMb2FkaW5nID0gZmFsc2U7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG5cbiAgICAgICAgcnVuKGZpbmlzaGVkQ2FsbGJhY2s6IChyZXN1bHQ6IG51bWJlcikgPT4gdm9pZCk6IHZvaWQge1xuICAgICAgICAgICAgLy8gU2F2ZSBmaW5pc2hlZENhbGxiYWNrXG4gICAgICAgICAgICB0aGlzLmZpbmlzaGVkQ2FsbGJhY2sgPSBmaW5pc2hlZENhbGxiYWNrO1xuXG4gICAgICAgICAgICAvLyBGaXJzdCBkbyBzb21lIHByZXBhcmF0aW9uIHN0dWZmXG4gICAgICAgICAgICB0aGlzLnJlYWRDb25maWdGaWxlKHRoaXMuY29uZmlndXJhdGlvblBhdGgpO1xuXG4gICAgICAgICAgICAvLyBMb2dpblxuICAgICAgICAgICAgaWYgKHRoaXMuY29uZmlndXJhdGlvbi5sb2dpbikge1xuICAgICAgICAgICAgICAgIHRoaXMubG9naW5BbmRUYWtlU2NyZWVuc2hvdHMoKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy50YWtlU2NyZWVuc2hvdHMoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHByaXZhdGUgYnVpbGRGdWxsVXJsKHBhdGg6IHN0cmluZyk6IHN0cmluZyB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jb25maWd1cmF0aW9uLmJhc2VVcmwgKyBcIi9cIiArIHBhdGg7XG4gICAgICAgIH1cblxuICAgICAgICBwcml2YXRlIGxvZ2luQW5kVGFrZVNjcmVlbnNob3RzKCk6IHZvaWQge1xuICAgICAgICAgICAgdGhpcy5wYWdlLm9wZW4oXG4gICAgICAgICAgICAgICAgdGhpcy5idWlsZEZ1bGxVcmwodGhpcy5jb25maWd1cmF0aW9uLmxvZ2luLnVybCksXG4gICAgICAgICAgICAgICAgKHJlc3VsdDogc3RyaW5nKSA9PiB7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3VsdCA9PSBcInN1Y2Nlc3NcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJPcGVuZWQgbG9naW4gcGFnZVwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIFBoYW50b21TaG90LmV2YWx1YXRlSmF2YVNjcmlwdCh0aGlzLnBhZ2UsIHRoaXMuY29uZmlndXJhdGlvbi5sb2dpbi5pbmplY3QpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBOb3cgd2FpdCB1bnRpbCBwYWdlIGxvYWQgaGFzIGZpbmlzaGVkICh1c2VyIEpTIHNob3VsZCB0cmlnZ2VyIHJlZmVycmFsKVxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRpbWVvdXQgPSB3aW5kb3cuc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgd2luZG93LmNsZWFySW50ZXJ2YWwoaW50ZXJ2YWwpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudGFrZVNjcmVlbnNob3RzKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9LCAxMCAqIDEwMDApO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGludGVydmFsID0gd2luZG93LnNldEludGVydmFsKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXRoaXMuaXNMb2FkaW5nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpbmRvdy5jbGVhclRpbWVvdXQodGltZW91dCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpbmRvdy5jbGVhckludGVydmFsKGludGVydmFsKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy50YWtlU2NyZWVuc2hvdHMoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCJMb2dpbiBmYWlsZWRcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmZpbmlzaGVkQ2FsbGJhY2soMSk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgc3RhdGljIGV2YWx1YXRlSmF2YVNjcmlwdChwYWdlOiBXZWJQYWdlLCBjb2RlOiBzdHJpbmcpOiB2b2lkIHtcbiAgICAgICAgICAgIHZhciBmcyA9IHJlcXVpcmUoXCJmc1wiKTtcbiAgICAgICAgICAgIGZzLndyaXRlKFwidG1wc2NyaXB0LmpzXCIsIGNvZGUpO1xuICAgICAgICAgICAgcGFnZS5pbmplY3RKcyhcInRtcHNjcmlwdC5qc1wiKTtcbiAgICAgICAgICAgIGZzLnJlbW92ZShcInRtcHNjcmlwdC5qc1wiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHByaXZhdGUgZ2V0RGV2aWNlQnlJZChpZDogc3RyaW5nKTogRGV2aWNlIHtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5jb25maWd1cmF0aW9uLmRldmljZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5jb25maWd1cmF0aW9uLmRldmljZXNbaV0uaWQgPT0gaWQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBEZXZpY2UodGhpcy5jb25maWd1cmF0aW9uLmRldmljZXNbaV0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHByaXZhdGUgZ2V0VGFyZ2V0RmlsZW5hbWUoY29uZmlnOiBTY3JlZW5zaG90KTogc3RyaW5nIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmNvbmZpZ3VyYXRpb24ub3V0RGlyICsgXCIvXCIgKyBjb25maWcuaWQgKyBcIi5wbmdcIjtcbiAgICAgICAgfVxuXG4gICAgICAgIHByaXZhdGUgdGFrZVNjcmVlbnNob3QoY29uZmlnOiBTY3JlZW5zaG90LCBjYWxsYmFjazogKHJlc3VsdDogYm9vbGVhbikgPT4gdm9pZCk6IHZvaWQge1xuICAgICAgICAgICAgdmFyIHBhZ2UgPSB0aGlzLnBhZ2U7XG5cbiAgICAgICAgICAgIHBhZ2Uudmlld3BvcnRTaXplID0gY29uZmlnLmRldmljZS5nZXRWaWV3cG9ydFNpemUoKTtcblxuICAgICAgICAgICAgcGFnZS5vcGVuKFxuICAgICAgICAgICAgICAgIGNvbmZpZy51cmwsXG4gICAgICAgICAgICAgICAgKHJlc3VsdDogc3RyaW5nKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChyZXN1bHQgPT0gXCJzdWNjZXNzXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEdldCB0aGUgdGFyZ2V0IHJlY3RhbmdsZVxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHJlY3RhbmdsZSA9IGNvbmZpZy5nZXRUYXJnZXRSZWN0YW5nbGUocGFnZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBwYWdlLmNsaXBSZWN0ID0gcmVjdGFuZ2xlO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBJbmplY3QgamF2YXNjcmlwdCBjb2RlXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY29uZmlnLmluamVjdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFBoYW50b21TaG90LmV2YWx1YXRlSmF2YVNjcmlwdChwYWdlLCBjb25maWcuaW5qZWN0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgd2luZG93LnNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFJlbmRlciB0aGUgcGFnZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhZ2UucmVuZGVyKHRoaXMuZ2V0VGFyZ2V0RmlsZW5hbWUoY29uZmlnKSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBGaW5pc2ggc2hvdFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrKHRydWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSwgY29uZmlnLmRlbGF5ID8gY29uZmlnLmRlbGF5IDogMCk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayhmYWxzZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICApO1xuICAgICAgICB9XG5cbiAgICAgICAgcHJpdmF0ZSB0YWtlU2NyZWVuc2hvdHMoKTogdm9pZCB7XG5cbiAgICAgICAgICAgIC8vIEN1cnJlbnQgc2hvdCBjb3VudGVyIHNpbmNlIHdlJ3JlIHByb2Nlc3NpbmcgdGhlIHF1ZXVlIGFzeW5jaHJvbm91c2x5LlxuICAgICAgICAgICAgdmFyIGN1cnJlbnRTaG90ID0gMDtcblxuICAgICAgICAgICAgdmFyIHByb2Nlc3NTaG90ID0gKCkgPT4ge1xuXG4gICAgICAgICAgICAgICAgdmFyIGNvbmZpZyA9IHRoaXMuY29uZmlndXJhdGlvbi5zaG90c1tjdXJyZW50U2hvdF07XG5cbiAgICAgICAgICAgICAgICAvLyBJbnN0YW50aWF0ZSBiYXNpYyBzY3JlZW5zaG90IGNsYXNzXG4gICAgICAgICAgICAgICAgdmFyIHNjcmVlbnNob3QgPSBuZXcgU2NyZWVuc2hvdCgpO1xuICAgICAgICAgICAgICAgIHNjcmVlbnNob3QuaWQgPSBjb25maWcuaWQ7XG4gICAgICAgICAgICAgICAgc2NyZWVuc2hvdC5pbmplY3QgPSBjb25maWcuaW5qZWN0O1xuICAgICAgICAgICAgICAgIHNjcmVlbnNob3QudXJsID0gdGhpcy5idWlsZEZ1bGxVcmwoY29uZmlnLnVybCk7XG4gICAgICAgICAgICAgICAgc2NyZWVuc2hvdC5kZXZpY2UgPSB0aGlzLmdldERldmljZUJ5SWQoY29uZmlnLmRldmljZSk7XG4gICAgICAgICAgICAgICAgc2NyZWVuc2hvdC5kZWxheSA9IGNvbmZpZy5kZWxheTtcblxuICAgICAgICAgICAgICAgIC8vIEVsZW1lbnQgb3IgcmVnaW9uIG1vZGVcbiAgICAgICAgICAgICAgICBpZiAoY29uZmlnLmVsZW1lbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgc2NyZWVuc2hvdC5lbGVtZW50ID0gY29uZmlnLmVsZW1lbnQ7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgc2NyZWVuc2hvdC5yZWdpb24gPSBuZXcgUmVjdGFuZ2xlKHNjcmVlbnNob3QuZGV2aWNlLCBjb25maWcucmVnaW9uKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyBUYWtlIHRoZSBzY3JlZW5zaG90IGFuZCBsb29wIHRvIG5leHQgb25lXG4gICAgICAgICAgICAgICAgdGhpcy50YWtlU2NyZWVuc2hvdChcbiAgICAgICAgICAgICAgICAgICAgc2NyZWVuc2hvdCxcbiAgICAgICAgICAgICAgICAgICAgKHJlc3VsdDogYm9vbGVhbikgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5pbmZvKChjdXJyZW50U2hvdCArIDEpICsgXCIuIFwiICsgKHJlc3VsdCA/IFwiU1VDQ0VTU1wiIDogXCJFUlJPUlwiKSArIFwiOiBcIiArIHNjcmVlbnNob3QuaWQgKyBcIiAoXCIgKyBzY3JlZW5zaG90LnVybCArIFwiKVwiKVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY3VycmVudFNob3QgPT0gdGhpcy5jb25maWd1cmF0aW9uLnNob3RzLmxlbmd0aCAtIDEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmZpbmlzaGVkQ2FsbGJhY2soMCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRTaG90Kys7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvY2Vzc1Nob3QoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAvLyBTdGFydCBwcm9jZXNzaW5nXG4gICAgICAgICAgICBwcm9jZXNzU2hvdCgpO1xuICAgICAgICB9XG5cbiAgICAgICAgcHJpdmF0ZSByZWFkQ29uZmlnRmlsZShwYXRoOiBzdHJpbmcpIHtcbiAgICAgICAgICAgIC8vIFJlYWQgY29uZmlnXG4gICAgICAgICAgICBjb25zb2xlLmluZm8oXCJSZWFkaW5nIGNvbmZpZyBmcm9tIFwiICsgcGF0aCk7XG4gICAgICAgICAgICB2YXIgZGF0YSA9IHRoaXMuZmlsZXN5c3RlbS5yZWFkKHBhdGgpO1xuICAgICAgICAgICAgdGhpcy5jb25maWd1cmF0aW9uID0gSlNPTi5wYXJzZShkYXRhKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbiIsIi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuLi9hbGwuZC50c1wiIC8+XG5cbm1vZHVsZSBQaGFudG9tU2hvdCB7XG4gICAgZXhwb3J0IGNsYXNzIFJlY3RhbmdsZSBpbXBsZW1lbnRzIElSZWdpb24sIENsaXBSZWN0IHtcbiAgICAgICAgdG9wOiBudW1iZXI7XG4gICAgICAgIGxlZnQ6IG51bWJlcjtcbiAgICAgICAgd2lkdGg6IG51bWJlcjtcbiAgICAgICAgaGVpZ2h0OiBudW1iZXI7XG5cbiAgICAgICAgY29uc3RydWN0b3IoZGV2aWNlOiBEZXZpY2UsIGNvbmZpZz86IElSZWdpb24pIHtcbiAgICAgICAgICAgIHRoaXMudG9wID0gKGNvbmZpZyAmJiBjb25maWcudG9wID8gY29uZmlnLnRvcCA6IDApO1xuICAgICAgICAgICAgdGhpcy5sZWZ0ID0gKGNvbmZpZyAmJiBjb25maWcubGVmdCA/IGNvbmZpZy5sZWZ0IDogMCk7XG4gICAgICAgICAgICB0aGlzLndpZHRoID0gKGNvbmZpZyAmJiBjb25maWcud2lkdGggPyBjb25maWcud2lkdGggOiBkZXZpY2Uud2lkdGgpO1xuICAgICAgICAgICAgdGhpcy5oZWlnaHQgPSAoY29uZmlnICYmIGNvbmZpZy5oZWlnaHQgPyBjb25maWcuaGVpZ2h0IDogZGV2aWNlLmhlaWdodCk7XG4gICAgICAgIH1cbiAgICB9XG59XG4iLCIvLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vYWxsLmQudHNcIiAvPlxuXG5tb2R1bGUgUGhhbnRvbVNob3Qge1xuICAgIGV4cG9ydCBjbGFzcyBTY3JlZW5zaG90IHtcbiAgICAgICAgaWQ6IHN0cmluZztcbiAgICAgICAgZGVsYXk6IG51bWJlcjtcbiAgICAgICAgZGV2aWNlOiBEZXZpY2U7XG4gICAgICAgIHVybDogc3RyaW5nO1xuICAgICAgICBpbmplY3Q6IHN0cmluZztcbiAgICAgICAgcmVnaW9uOiBSZWN0YW5nbGU7XG4gICAgICAgIGVsZW1lbnQ6IHN0cmluZztcblxuICAgICAgICBnZXRUYXJnZXRSZWN0YW5nbGUocGFnZTogV2ViUGFnZSk6IFJlY3RhbmdsZSB7XG4gICAgICAgICAgICBpZiAodGhpcy5yZWdpb24pIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5yZWdpb247XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIEluamVjdCB0YXJnZXQgZWxlbWVudCBzZWxlY3RvciB2aWEgZXZhbHVhdGVKYXZhc2NyaXB0KCkgc2luY2UgZXZhbHVhdGUoKSBpcyBleGVjdXRlZCB3aXRoaW5cbiAgICAgICAgICAgICAgICAvLyB0aGUgcGFnZSBhbmQgY2Fubm90IGFjY2VzcyB2YXJpYWJsZXMgaW4gdGhlIGN1cnJlbnQgc2NvcGUuXG4gICAgICAgICAgICAgICAgUGhhbnRvbVNob3QuZXZhbHVhdGVKYXZhU2NyaXB0KHBhZ2UsIFwid2luZG93LnBoYW50b21TaG90VGFyZ2V0RWxlbWVudCA9IFwiICsgSlNPTi5zdHJpbmdpZnkodGhpcy5lbGVtZW50KSArIFwiO1wiKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gcGFnZS5ldmFsdWF0ZShmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCg8YW55PndpbmRvdykucGhhbnRvbVNob3RUYXJnZXRFbGVtZW50KTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHJlY3RhbmdsZSA9IGVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0b3A6IHJlY3RhbmdsZS50b3AsXG4gICAgICAgICAgICAgICAgICAgICAgICBsZWZ0OiByZWN0YW5nbGUubGVmdCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoOiByZWN0YW5nbGUucmlnaHQgLSByZWN0YW5nbGUubGVmdCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGhlaWdodDogcmVjdGFuZ2xlLmJvdHRvbSAtIHJlY3RhbmdsZS50b3BcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn0iLCIvLy8gPHJlZmVyZW5jZSBwYXRoPVwiYWxsLmQudHNcIiAvPlxuXG52YXIgc3lzdGVtID0gcmVxdWlyZShcInN5c3RlbVwiKTtcblxudmFyIHBoYW50b21TaG90ID0gbmV3IFBoYW50b21TaG90LlBoYW50b21TaG90KHN5c3RlbS5hcmdzWzFdKTtcbnBoYW50b21TaG90LnJ1bigocmVzdWx0KSA9PiB7IHBoYW50b20uZXhpdChyZXN1bHQpOyB9KTtcbiJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==
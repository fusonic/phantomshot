/// <reference path="../all.d.ts" />
var PhantomShot;
(function (PhantomShot) {
    var Device = (function () {
        function Device(config) {
            this.devicePixelRatio = (config.devicePixelRatio ? config.devicePixelRatio : 1);
            this.height = config.height;
            this.width = config.width;
        }
        Device.prototype.getViewportSize = function () {
            return {
                height: this.height * this.devicePixelRatio,
                width: this.width * this.devicePixelRatio
            };
        };
        return Device;
    })();
    PhantomShot.Device = Device;
})(PhantomShot || (PhantomShot = {}));

/// <reference path="../all.d.ts" />

/// <reference path="../all.d.ts" />

/// <reference path="../all.d.ts" />

/// <reference path="../all.d.ts" />

/// <reference path="../all.d.ts" />

/// <reference path="../all.d.ts" />
var PhantomShot;
(function (_PhantomShot) {
    var PhantomShot = (function () {
        function PhantomShot(configFilePath) {
            var _this = this;
            this.filesystem = require("fs");
            this.system = require("system");
            this.webpage = require("webpage");
            this.defaultTimeout = 10 * 1000;
            this.configurationPath = configFilePath;
            this.page = this.webpage.create();
            // Set up loading state
            this.page.onLoadStarted = function () {
                _this.isLoading = true;
            };
            this.page.onLoadFinished = function (status) {
                _this.isLoading = false;
            };
        }
        PhantomShot.prototype.run = function (finishedCallback) {
            // Save finishedCallback
            this.finishedCallback = finishedCallback;
            // First do some preparation stuff
            this.readConfigFile(this.configurationPath);
            // Login
            if (this.configuration.login) {
                this.loginAndTakeScreenshots();
            }
            else {
                this.takeScreenshots();
            }
        };
        PhantomShot.prototype.buildFullUrl = function (path) {
            return this.configuration.baseUrl + "/" + path;
        };
        PhantomShot.prototype.loginAndTakeScreenshots = function () {
            var _this = this;
            this.page.open(this.buildFullUrl(this.configuration.login.url), function (result) {
                if (result == "success") {
                    console.log("Opened login page");
                    PhantomShot.evaluateJavaScript(_this.page, _this.configuration.login.inject);
                    // Now wait until page load has finished (user JS should trigger referral)
                    var timeout = window.setTimeout(function () {
                        console.error("Login timed out");
                        _this.finishedCallback(1);
                    }, _this.defaultTimeout);
                    var interval = window.setInterval(function () {
                        if (!_this.isLoading) {
                            window.clearTimeout(timeout);
                            window.clearInterval(interval);
                            _this.takeScreenshots();
                        }
                    });
                }
                else {
                    console.error("Login failed");
                    _this.finishedCallback(1);
                }
            });
        };
        PhantomShot.evaluateJavaScript = function (page, code) {
            var fs = require("fs");
            fs.write("tmpscript.js", code);
            page.injectJs("tmpscript.js");
            fs.remove("tmpscript.js");
        };
        PhantomShot.prototype.getDeviceById = function (id) {
            for (var i = 0; i < this.configuration.devices.length; i++) {
                if (this.configuration.devices[i].id == id) {
                    return new _PhantomShot.Device(this.configuration.devices[i]);
                }
            }
        };
        PhantomShot.prototype.getTargetFilename = function (config) {
            return this.configuration.outDir + "/" + config.id + ".png";
        };
        PhantomShot.prototype.takeScreenshot = function (config, callback) {
            var _this = this;
            var page = this.page;
            var timeout = window.setTimeout(function () {
                try {
                    page.close();
                    callback(false);
                }
                catch (ex) {
                }
            }, this.defaultTimeout);
            page.viewportSize = config.device.getViewportSize();
            page.open(config.url, function (result) {
                if (result == "success") {
                    try {
                        var rectangle = config.getTargetRectangle(page);
                        page.clipRect = rectangle;
                    }
                    catch (ex) {
                        console.error(ex);
                        callback(false);
                    }
                    // Inject javascript code
                    if (config.inject) {
                        try {
                            PhantomShot.evaluateJavaScript(page, config.inject);
                        }
                        catch (ex) {
                            console.error("Error executing JavaScript code");
                            console.error(ex);
                            callback(false);
                        }
                    }
                    window.setTimeout(function () {
                        // Render the page
                        page.render(_this.getTargetFilename(config));
                        // Clear timeout
                        window.clearTimeout(timeout);
                        // Finish shot
                        callback(true);
                    }, config.delay ? config.delay : 0);
                }
                else {
                    callback(false);
                }
            });
        };
        PhantomShot.prototype.takeScreenshots = function () {
            var _this = this;
            // Current shot counter since we're processing the queue asynchronously.
            var currentShot = 0;
            var processShot = function () {
                var config = _this.configuration.shots[currentShot];
                // Instantiate basic screenshot class
                var screenshot = new _PhantomShot.Screenshot();
                screenshot.id = config.id;
                screenshot.inject = config.inject;
                screenshot.url = _this.buildFullUrl(config.url);
                screenshot.device = _this.getDeviceById(config.device);
                screenshot.delay = config.delay;
                // Element or region mode
                if (config.element) {
                    screenshot.element = config.element;
                }
                else {
                    screenshot.region = new _PhantomShot.Rectangle(screenshot.device, config.region);
                }
                // Take the screenshot and loop to next one
                _this.takeScreenshot(screenshot, function (result) {
                    console.info((currentShot + 1) + ". " + (result ? "SUCCESS" : "ERROR") + ": " + screenshot.id + " (" + screenshot.url + ")");
                    if (currentShot == _this.configuration.shots.length - 1) {
                        _this.finishedCallback(0);
                    }
                    else {
                        currentShot++;
                        processShot();
                    }
                });
            };
            // Start processing
            processShot();
        };
        PhantomShot.prototype.readConfigFile = function (path) {
            // Read config
            console.info("Reading config from " + path);
            var data = this.filesystem.read(path);
            this.configuration = JSON.parse(data);
            if (this.configuration.timeout) {
                this.defaultTimeout = this.configuration.timeout * 1000;
            }
        };
        return PhantomShot;
    })();
    _PhantomShot.PhantomShot = PhantomShot;
})(PhantomShot || (PhantomShot = {}));

/// <reference path="../all.d.ts" />
var PhantomShot;
(function (PhantomShot) {
    var Rectangle = (function () {
        function Rectangle(device, config) {
            this.top = (config && config.top ? config.top : 0);
            this.left = (config && config.left ? config.left : 0);
            this.width = (config && config.width ? config.width : device.width);
            this.height = (config && config.height ? config.height : device.height);
        }
        return Rectangle;
    })();
    PhantomShot.Rectangle = Rectangle;
})(PhantomShot || (PhantomShot = {}));

/// <reference path="../all.d.ts" />
var PhantomShot;
(function (PhantomShot) {
    var Screenshot = (function () {
        function Screenshot() {
        }
        Screenshot.prototype.getTargetRectangle = function (page) {
            if (this.region) {
                return this.region;
            }
            else {
                // Inject target element selector via evaluateJavascript() since evaluate() is executed within
                // the page and cannot access variables in the current scope.
                PhantomShot.PhantomShot.evaluateJavaScript(page, "window.phantomShotTargetElement = " + JSON.stringify(this.element) + ";");
                // Get target rectangle
                var rectangle = page.evaluate(function () {
                    var element = document.querySelector(window.phantomShotTargetElement);
                    if (element == null) {
                        return null;
                    }
                    else {
                        var rectangle = element.getBoundingClientRect();
                        return {
                            top: rectangle.top,
                            left: rectangle.left,
                            width: rectangle.right - rectangle.left,
                            height: rectangle.bottom - rectangle.top
                        };
                    }
                });
                if (rectangle) {
                    return rectangle;
                }
                else {
                    throw "Target element (" + this.element + ") not found.";
                }
            }
        };
        return Screenshot;
    })();
    PhantomShot.Screenshot = Screenshot;
})(PhantomShot || (PhantomShot = {}));

/// <reference path="all.d.ts" />
var system = require("system");
var phantomShot = new PhantomShot.PhantomShot(system.args[1]);
phantomShot.run(function (result) {
    phantom.exit(result);
});

//# sourceMappingURL=data:application/json;base64,